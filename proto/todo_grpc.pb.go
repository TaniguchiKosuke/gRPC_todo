// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TodoQueryClient is the client API for TodoQuery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodoQueryClient interface {
	Get(ctx context.Context, in *TodoGetRuest, opts ...grpc.CallOption) (*TodoGetResponse, error)
}

type todoQueryClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoQueryClient(cc grpc.ClientConnInterface) TodoQueryClient {
	return &todoQueryClient{cc}
}

func (c *todoQueryClient) Get(ctx context.Context, in *TodoGetRuest, opts ...grpc.CallOption) (*TodoGetResponse, error) {
	out := new(TodoGetResponse)
	err := c.cc.Invoke(ctx, "/service.TodoQuery/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TodoQueryServer is the server API for TodoQuery service.
// All implementations should embed UnimplementedTodoQueryServer
// for forward compatibility
type TodoQueryServer interface {
	Get(context.Context, *TodoGetRuest) (*TodoGetResponse, error)
}

// UnimplementedTodoQueryServer should be embedded to have forward compatible implementations.
type UnimplementedTodoQueryServer struct {
}

func (UnimplementedTodoQueryServer) Get(context.Context, *TodoGetRuest) (*TodoGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

// UnsafeTodoQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodoQueryServer will
// result in compilation errors.
type UnsafeTodoQueryServer interface {
	mustEmbedUnimplementedTodoQueryServer()
}

func RegisterTodoQueryServer(s grpc.ServiceRegistrar, srv TodoQueryServer) {
	s.RegisterService(&TodoQuery_ServiceDesc, srv)
}

func _TodoQuery_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoGetRuest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoQueryServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.TodoQuery/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoQueryServer).Get(ctx, req.(*TodoGetRuest))
	}
	return interceptor(ctx, in, info, handler)
}

// TodoQuery_ServiceDesc is the grpc.ServiceDesc for TodoQuery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TodoQuery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.TodoQuery",
	HandlerType: (*TodoQueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _TodoQuery_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "todo.proto",
}

// TodoCommandClient is the client API for TodoCommand service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodoCommandClient interface {
	Create(ctx context.Context, in *TodoCreateRuest, opts ...grpc.CallOption) (*TodoCreateResponse, error)
}

type todoCommandClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoCommandClient(cc grpc.ClientConnInterface) TodoCommandClient {
	return &todoCommandClient{cc}
}

func (c *todoCommandClient) Create(ctx context.Context, in *TodoCreateRuest, opts ...grpc.CallOption) (*TodoCreateResponse, error) {
	out := new(TodoCreateResponse)
	err := c.cc.Invoke(ctx, "/service.TodoCommand/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TodoCommandServer is the server API for TodoCommand service.
// All implementations should embed UnimplementedTodoCommandServer
// for forward compatibility
type TodoCommandServer interface {
	Create(context.Context, *TodoCreateRuest) (*TodoCreateResponse, error)
}

// UnimplementedTodoCommandServer should be embedded to have forward compatible implementations.
type UnimplementedTodoCommandServer struct {
}

func (UnimplementedTodoCommandServer) Create(context.Context, *TodoCreateRuest) (*TodoCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}

// UnsafeTodoCommandServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodoCommandServer will
// result in compilation errors.
type UnsafeTodoCommandServer interface {
	mustEmbedUnimplementedTodoCommandServer()
}

func RegisterTodoCommandServer(s grpc.ServiceRegistrar, srv TodoCommandServer) {
	s.RegisterService(&TodoCommand_ServiceDesc, srv)
}

func _TodoCommand_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoCreateRuest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoCommandServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.TodoCommand/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoCommandServer).Create(ctx, req.(*TodoCreateRuest))
	}
	return interceptor(ctx, in, info, handler)
}

// TodoCommand_ServiceDesc is the grpc.ServiceDesc for TodoCommand service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TodoCommand_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.TodoCommand",
	HandlerType: (*TodoCommandServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _TodoCommand_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "todo.proto",
}
